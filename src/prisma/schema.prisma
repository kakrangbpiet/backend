generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  
}

model superAdmin {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  phoneNumber     String?  @unique 
  password    String
  category    String
  permissions String[]
}

model samsarauser {
  id               String   @id @default(uuid())
  accountStatus    String
  address          String
  category         String
  createdAt        DateTime @default(now())
  email            String   @unique
  name             String
  phoneNumber      String   @unique
  updatedAt        DateTime @updatedAt
  permissions      String[] @default([])
  roleId           String?
  razorpayPayments String[] @default([])
  cartItems Json[] @default([])
}

model unverifiedsamsarauser {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  phoneNumber String   @unique
  updatedAt   DateTime @updatedAt
}

model TravelPackage {
  id             String   @id @default(uuid())
  title          String
  description    String
  price          Float
  originalPrice  Float?
  image          String
  images         String[]
  location       String
  category       String
  status         String   @default("active")
  maxTravelers   Int?
  availableSpots Int?
  travelType     String?
  activities     String[]
  dateAvailabilities DateAvailability[]
  videos         TravelVideo[]   
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@index([status])
  @@index([category])
  @@index([location])
  @@index([status, category])
  @@map("travel_packages")
}

model TravelVideo {
  id           String   @id @default(uuid())
  awsUrl   String   // base64-encoded video string
  travelPackageId String
  travelPackage   TravelPackage @relation(fields: [travelPackageId], references: [id])

  createdAt    DateTime @default(now())
}

model DateAvailability {
  id             String          @id @default(cuid())
  startDate      Int             // Unix timestamp
  endDate        Int             // Unix timestamp
  maxTravelers   Int
  availableSpots Int
  price          Float?
  originalPrice  Float?
  travelPackage  TravelPackage   @relation(fields: [travelPackageId], references: [id])
  travelPackageId String
}

model TravelInquiry {
  id             String       @id @default(cuid())
  packageId      String
  packageTitle   String
  destination    String
  address        String?
  passengerCount Int
  startDate      Int
  endDate        Int
  tripType       String
  specialRequests String?
  status         String
  userId         String?
  name           String?
  email          String?
  phoneNumber    String?
  createdAt      DateTime      @default(now())
  paymentInfo    PaymentInfo?  @relation(fields: [paymentInfoId], references: [id])
  paymentInfoId  String?       @unique
}

model PaymentInfo {
  id               String      @id @default(cuid())
  paymentMethod    String
  amount           Float
  currency         String
  status           String      // e.g., 'pending', 'completed', 'failed'
  transactionId    String?
  travelInquiry    TravelInquiry? @relation
  createdAt        DateTime    @default(now())
}

