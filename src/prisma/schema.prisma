generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model superAdmin {
  id          String   @id @default(uuid())
  email       String   @unique
  name        String
  password    String
  category    String
  permissions String[]
  phoneNumber String?  @unique
}

model samsarauser {
  id               String   @id @default(uuid())
  accountStatus    String
  address          String
  category         String
  createdAt        DateTime @default(now())
  email            String   @unique
  name             String
  phoneNumber      String   @unique
  updatedAt        DateTime @updatedAt
  permissions      String[] @default([])
  roleId           String?
  razorpayPayments String[] @default([])
  cartItems        Json[]   @default([])
}

model unverifiedsamsarauser {
  id          String   @id @default(uuid())
  createdAt   DateTime @default(now())
  phoneNumber String   @unique
  updatedAt   DateTime @updatedAt
}

model TravelPackage {
  id                 String             @id @default(uuid())
  title              String
  description        String
  image              String
  images             String[]
  location           String
  category           String
  status             String             @default("active")
  maxTravelers       Int?
  availableSpots     Int?
  travelType         String?
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  activities         String[]
  dateAvailabilities DateAvailability[]
  videos             TravelVideo[]

  @@index([status])
  @@index([category])
  @@index([location])
  @@index([status, category])
  @@map("travel_packages")
}

model TravelVideo {
  id              String        @id @default(uuid())
  travelPackageId String
  createdAt       DateTime      @default(now())
  awsUrl          String
  travelPackage   TravelPackage @relation(fields: [travelPackageId], references: [id])
}

model DateAvailability {
  id              String        @id @default(cuid())
  startDate       Int
  endDate         Int
  maxTravelers    Int
  availableSpots  Int
  travelPackageId String
  originalPrice   Float?
  price           Float?
  travelPackage   TravelPackage @relation(fields: [travelPackageId], references: [id])
}

model TravelInquiry {
  id              String       @id @default(cuid())
  packageId       String
  packageTitle    String
  destination     String
  address         String?
  passengerCount  Int
  tripType        String
  specialRequests String?
  status          String
  userId          String?
  name            String?
  email           String?
  phoneNumber     String?
  createdAt       DateTime     @default(now())
  paymentInfoId   String?      @unique
  startDate       Int
  endDate         Int
  paymentInfo     PaymentInfo? @relation(fields: [paymentInfoId], references: [id])
}

model Meeting {
  id              String        @id @default(cuid())
  name            String
  email           String
  meetingDateTime DateTime
  meetingType     String
  topics          String[]
  agreeTerms      Boolean
  status          String
  parentMeetingId String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  phoneNumber     String
  parentMeeting   Meeting?      @relation("MeetingChildren", fields: [parentMeetingId], references: [id])
  childMeetings   Meeting[]     @relation("MeetingChildren")
  notes           MeetingNote[]

  @@index([email])
  @@index([phoneNumber])
  @@index([meetingDateTime])
  @@index([status])
  @@index([parentMeetingId])
}

model MeetingNote {
  id        String   @id @default(cuid())
  content   String
  authorId  String?
  meetingId String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  topic     String   @default("General")
  meeting   Meeting  @relation(fields: [meetingId], references: [id])

  @@index([meetingId])
  @@index([authorId])
}

model PaymentInfo {
  id            String         @id @default(cuid())
  paymentMethod String
  amount        Float
  currency      String
  status        String
  transactionId String?
  createdAt     DateTime       @default(now())
  travelInquiry TravelInquiry?
}


model OtpVerification {
  id          String   @id @default(uuid())
  otpType     String   // 'login', 'registration', 'password-reset', etc.
  to          String   // recipient phone number or email
  from        String   // sender identifier (Twilio number)
  message     String?  // message content
  otpCode     String   // the OTP code
  expiresAt   DateTime // when the OTP expires
  verified    Boolean  @default(false)
  attempts    Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([to, otpType])
  @@index([expiresAt])
  @@index([verified])
}

model Coupon {
  id            String    @id @default(uuid())
  name          String
  description   String?
  logo          String?
  code          String    @unique
  maxUsers      Int
  usedCount     Int       @default(0)
  expiryDate    DateTime
  couponType    String    // 'website' | 'personal'
  discountType  String    // 'percentage' | 'fixed'
  discountValue Float
  minOrderAmount Float?   @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  isActive      Boolean   @default(true)

  @@index([code])
  @@index([isActive])
  @@index([expiryDate])
  @@index([couponType])
}

model CouponUsage {
  id        String   @id @default(uuid())
  couponId  String
  userId    String
  usedAt    DateTime @default(now())
  
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  user      samsarauser @relation(fields: [userId], references: [id])

  @@unique([couponId, userId])
}